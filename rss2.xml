<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>blog.sryu.dev</title>
    <link>https://blog.sryu.dev/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 20 Aug 2020 14:52:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Raspberry Pi OS 이미지를 직접 빌드하기</title>
      <link>https://blog.sryu.dev/2020/08/12/Raspberry-Pi-OS-%E1%84%8B%E1%85%B5%E1%84%86%E1%85%B5%E1%84%8C%E1%85%B5%E1%84%85%E1%85%B3%E1%86%AF-%E1%84%8C%E1%85%B5%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%B8-%E1%84%87%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/</link>
      <guid>https://blog.sryu.dev/2020/08/12/Raspberry-Pi-OS-%E1%84%8B%E1%85%B5%E1%84%86%E1%85%B5%E1%84%8C%E1%85%B5%E1%84%85%E1%85%B3%E1%86%AF-%E1%84%8C%E1%85%B5%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%B8-%E1%84%87%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/</guid>
      <pubDate>Tue, 11 Aug 2020 15:34:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;얼마 전 Raspberry Pi OS의 arm64 이미지가 공개되었는데요, 데스크탑 버전만 공개되어서 라이트 버전은 구할 수 없나 알아보던 도중 pi-gen을 이용하면 이미지를 원하는 대로 빌드할 수 있다고 해서 한번 사용해봤습니다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>얼마 전 Raspberry Pi OS의 arm64 이미지가 공개되었는데요, 데스크탑 버전만 공개되어서 라이트 버전은 구할 수 없나 알아보던 도중 pi-gen을 이용하면 이미지를 원하는 대로 빌드할 수 있다고 해서 한번 사용해봤습니다.</p><a id="more"></a><h2 id="시작하기-전에"><a href="#시작하기-전에" class="headerlink" title="시작하기 전에"></a>시작하기 전에</h2><p>이 글은 <a href="https://github.com/RPi-Distro/pi-gen/blob/master/README.md">https://github.com/RPi-Distro/pi-gen/blob/master/README.md</a> 에서 많은 부분을 참고했습니다.</p><h2 id="소스-다운로드"><a href="#소스-다운로드" class="headerlink" title="소스 다운로드"></a>소스 다운로드</h2><p><a href="https://github.com/RPi-Distro/pi-gen.git">pi-gen</a>을 클론합니다. 64비트 이미지를 빌드할 경우 arm64 브랜치를 클론하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/RPi-Distro/pi-gen.git <span class="comment"># 32비트 이미지를 빌드할 경우</span></span><br><span class="line">git <span class="built_in">clone</span> -b arm64 https://github.com/RPi-Distro/pi-gen.git <span class="comment"># 64비트 이미지를 빌드할 경우</span></span><br><span class="line"><span class="built_in">cd</span> pi-gen</span><br></pre></td></tr></table></figure><h2 id="이미지-커스터마이징"><a href="#이미지-커스터마이징" class="headerlink" title="이미지 커스터마이징"></a>이미지 커스터마이징</h2><p>빌드할 이미지를 커스터마이징 하기 위해서는 아래의 변수를 수동으로 환경 변수에 등록하거나 <code>pi-gen</code> 디렉토리 안에 <code>config</code> 라는 파일을 새로 만들어 작성하시면 됩니다.</p><ul><li><p><code>IMG_NAME</code><br>빌드할 이미지의 이름입니다. 이름에 공백이 포함된 경우 빌드가 제대로 되지 않았습니다.</p></li><li><p><code>RELEASE</code><br>Debian의 어떤 릴리즈를 사용할지 정하는 값이며, 기본값은 <code>buster</code> 입니다. <code>jessie</code> 이후의 릴리즈만 사용 가능하며 자세한 정보는 <a href="https://ko.wikipedia.org/wiki/%EB%8D%B0%EB%B9%84%EC%95%88#%EB%B0%B0%ED%8F%AC_%EC%97%AD%EC%82%AC">이곳</a>을 참고하세요.</p></li><li><p><code>APT_PROXY</code><br>apt 사용시 어떤 프록시를 사용할지 정하는 값이며, 빌드할 때만 사용되고 이미지에 기록되지 않습니다.</p></li><li><p><code>BASE_DIR</code><br>pi-gen의 최상위 디렉토리를 지정하는 값으로, 빌드 스크립트가 자동으로 이 디렉토리를 찾으므로 굳이 지정할 필요가 없습니다. 잘못된 디렉토리를 지정할 경우 정상적으로 빌드되지 않습니다.</p></li><li><p><code>WORK_DIR</code><br>빌드하면서 생성되는 임시 파일을 저장할 디렉토리입니다. 기본값은 <code>$BASE_DIR/work</code>이며, 용량이 부족하거나 더 빠른 저장장치를 사용해서 빌드 시간을 단축시키고 싶으실 때 디렉토리를 지정하는 것을 추천합니다. NTFS로 포맷된 드라이브에서는 정상적으로 작동되지 않습니다.</p></li><li><p><code>DEPLOY_DIR</code><br>빌드된 이미지를 저장할 디렉토리입니다. 기본값은 <code>$BASE_DIR/deploy</code>입니다.</p></li><li><p><code>DEPLOY_ZIP</code><br>이미지를 ZIP으로 생성할지 결정하는 값입니다. 0일 경우 .img 파일이, 1일 경우 .zip 파일이 생성됩니다.</p></li><li><p><code>USE_QEMU</code><br>빌드할 이미지를 QEMU에 최적화할지 결정하는 값입니다. 1일 경우 QEMU에서 사용되는 것을 가정하고 이미지를 빌드합니다.</p></li><li><p><code>LOCALE_DEFAULT</code><br>시스템 로케일을 지정하며, 기본값은 <code>en_GB.UTF-8</code>입니다. <code>ko-KR.UTF-8</code>로도 지정이 가능하나 글자라 깨져서 표시될 수 있으니 기본값이나 <code>en_US.UTF-8</code>을 사용하는 것을 추천합니다.</p></li><li><p><code>TARGET_HOSTNAME</code><br>호스트 네임을 지정하며, 기본값은 <code>raspberrypi</code> 입니다.</p></li><li><p><code>KEYBOARD_KEYMAP</code><br>키보드 배열을 지정하며, 기본값은 <code>gb</code> 입니다. <code>gb</code> 는 영국식 키보드 배열인데, 우리가 흔히 사용하는 배열이랑 꽤 많이 달라 <code>us</code> 로 지정하는 것을 추천합니다.</p></li></ul><p><img src="/images/keymap_gb.svg" alt="UK Keyboard layout (출처: Wikipedia)"></p><ul><li><p><code>TIMEZONE_DEFAULT</code><br>타임존을 지정하며, <code>Europe/London</code> 이 기본값입니다. <code>Asia/Seoul</code> 로 지정하는 것을 추천합니다.</p></li><li><p><code>FIRST_USER_NAME</code><br>처음 로그인 할 계정의 이름이며, 기본값은 <code>pi</code> 입니다. 영문 소문자, 숫자, 언더스코어(_)로만 이루어져야 하며 숫자가 맨 앞에 나오면 안되고 최대 31글자까지 입력할 수 있습니다.</p></li><li><p><code>FIRST_USER_PASS</code><br>처음 로그인 할 계정의 패스워드이며, 기본값은 <code>raspberry</code> 입니다.</p></li><li><p><code>WPA_ESSID</code><br>사용할 와이파이의 SSID입니다.</p></li><li><p><code>WPA_PASSWORD</code><br>사용할 와이파이의 패스워드입니다.</p></li><li><p><code>WPA_COUNTRY</code><br>사용할 와이파이가 있는 국가를 지정하며, 한국으로 설정할 경우 와이파이가 작동하지 않는 문제가 있는 것으로 알고 있습니다.</p></li><li><p><code>ENABLE_SSH</code><br>SSH를 사용할지 정하며, 기본값은 0(비활성화)입니다. 1(활성화)로 설정하면 부팅 즉시 SSH 접속이 가능하지만 보안에 취약하며 이 설정은 raspi-config로 변경 가능합니다.</p></li><li><p><code>STAGE_LIST</code><br>이미지를 만들 때 어떤 단계를 거칠지 정하는 값입니다. <code>stage0 stage1 stage2</code> 와 같은 형태로 작성하며, 앞에서부터 순서대로 실행됩니다.</p></li></ul><h2 id="Stage-지정하기"><a href="#Stage-지정하기" class="headerlink" title="Stage 지정하기"></a>Stage 지정하기</h2><p>pi-gen은 설치 과정을 여러 stage로 나눠 필요한 기능만 설치할 수 있도록 만들었습니다. 각 stage의 기능은 아래와 같습니다.</p><ul><li><p><code>stage0</code><br>기본적인 파일 시스템을 만들고 부트에 필요한 것들을 설치합니다. 하지만 이 단계만 설치해서는 제대로 부팅이 되지 않습니다.</p></li><li><p><code>stage1</code><br>시스템에 필요한 최소한의 것들을 설치합니다. 부트로더와 네트워크를 사용할 수 있도록 설정하고, raspi-config와 같은 필수적인 패키지를 설치하며 실사용이 가능하지만 빠진 기능이 많아 직접 설치하고 설정해야 하는 것들이 많습니다.</p></li><li><p><code>stage2</code><br>라이트 버전의 이미지를 생성합니다. 와이파이와 블루투스와 같은 기본적인 기능이 추가되며 파이썬, Lua, build-essential과 같은 패키지가 포함되는데 이런 패키지가 포함되지 않은 이미지를 만들고 싶다면 pi-gen을 직접 수정하셔야 합니다.</p></li><li><p><code>stage3</code><br>데스크탑을 위한 프로그램을 설치합니다. X11, LXDE, 웹 브라우저, 개발 도구와 같은 프로그램들이 설치됩니다.</p></li><li><p><code>stage4</code><br>일반적인 라즈베리파이 이미지입니다. 4GB짜리 SD카드에 맞게 설계되었으며, 사용자가 라즈베리파이를 친숙하게 사용할 수 있도록 하는 프로그램들이 설치됩니다.</p></li><li><p><code>stage5</code><br>풀버전의 라즈베리파이 이미지입니다. 더 많은 개발 도구, 이메일 클라이언트, 스크래치, sonic-pi, 리브레 오피스 등을 설치합니다.</p></li></ul><p>빌드 스크립트는 알파벳·숫자 순서로 각 stage에 있는 기능을 설치합니다. 만약 stage 디렉토리 안에 SKIP이라는 이름의 파일이 있으면 그 stage는 건너뛰고, EXPORT_NOOBS라는 이름의 파일이 있으면 결과물을 Noobs에 담아 저장하며 EXPORT_IMAGE라는 파일이 있으면 결과물을 .img로 저장합니다.</p><h2 id="빌드"><a href="#빌드" class="headerlink" title="빌드"></a>빌드</h2><h3 id="데비안-기반-OS-사용자"><a href="#데비안-기반-OS-사용자" class="headerlink" title="데비안 기반 OS 사용자"></a>데비안 기반 OS 사용자</h3><p>Debian Buster과 Ubuntu Xenial에서 정상적으로 빌드되며 구버전의 OS에서는 제대로 빌드되지 않습니다. 그 외의 운영체제의 경우에는 도커를 이용해서 빌드하세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install coreutils quilt parted qemu-user-static debootstrap zerofree zip dosfstools bsdtar libcap2-bin grep rsync xz-utils file git curl bc</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h3 id="도커-사용자"><a href="#도커-사용자" class="headerlink" title="도커 사용자"></a>도커 사용자</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build-docker.sh</span><br></pre></td></tr></table></figure><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>arm64 아키텍처의 Raspberry Pi OS <strong>Lite</strong> 이미지를 빌드하는 명령입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리포지토리 다운로드</span></span><br><span class="line">git <span class="built_in">clone</span> -b arm64 https://github.com/RPi-Distro/pi-gen.git</span><br><span class="line"><span class="built_in">cd</span> pi-gen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지 커스터마이징</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"IMG_NAME='raspios'"</span> &gt; config</span><br><span class="line"></span><br><span class="line"><span class="comment"># SKIP 파일을 생성하여 Stage 2 (Lite) 까지의 기능 설치하기</span></span><br><span class="line">touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXPORT_IMAGE 파일을 생성하여 이미지로 저장하기</span></span><br><span class="line"><span class="comment"># NOOBS에 담아 저장하고 싶으면 EXPORT_IMAGE 대신 EXPORT_NOOBS를 사용하세요.</span></span><br><span class="line">touch ./stage2/EXPORT_IMAGE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 빌드</span></span><br><span class="line">sudo ./build.sh</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://blog.sryu.dev/2020/08/12/Raspberry-Pi-OS-%E1%84%8B%E1%85%B5%E1%84%86%E1%85%B5%E1%84%8C%E1%85%B5%E1%84%85%E1%85%B3%E1%86%AF-%E1%84%8C%E1%85%B5%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%B8-%E1%84%87%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
